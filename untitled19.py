# -*- coding: utf-8 -*-
"""Untitled19.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zk72cKJ71eIYkQqxV2Y07pwvUUnnB3X0
"""

# üåæ Crop Yield Prediction using Machine Learning
# Author: ChatGPT (GPT-5)
# Description: Predict crop yield using rainfall, temperature, soil type, and fertilizer usage.

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from xgboost import XGBRegressor
from sklearn.metrics import mean_squared_error, r2_score
import joblib

# ---------------------------------------------
# 1Ô∏è‚É£ Load or Generate Dataset
# ---------------------------------------------
# If you already have a dataset, replace this with:
# df = pd.read_csv("data/crop_yield.csv")

np.random.seed(42)
data_size = 500

df = pd.DataFrame({
    "State": np.random.choice(["Punjab", "Maharashtra", "Tamil Nadu", "Uttar Pradesh"], data_size),
    "Crop": np.random.choice(["Rice", "Wheat", "Maize", "Sugarcane"], data_size),
    "Rainfall": np.random.uniform(500, 2000, data_size),
    "Temperature": np.random.uniform(15, 35, data_size),
    "Soil Type": np.random.choice(["Clay", "Sandy", "Loamy"], data_size),
    "Fertilizer Usage": np.random.uniform(50, 250, data_size)
})

# Synthetic yield formula (for demonstration)
df["Yield"] = (
    0.005 * df["Rainfall"]
    + 0.1 * df["Temperature"]
    + 0.02 * df["Fertilizer Usage"]
    + np.random.normal(0, 3, data_size)
)

# ---------------------------------------------
# 2Ô∏è‚É£ Preprocessing
# ---------------------------------------------
encoder = LabelEncoder()
df["Crop"] = encoder.fit_transform(df["Crop"])
df["Soil Type"] = encoder.fit_transform(df["Soil Type"])
df["State"] = encoder.fit_transform(df["State"])

X = df.drop("Yield", axis=1)
y = df["Yield"]

scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# ---------------------------------------------
# 3Ô∏è‚É£ Split Dataset
# ---------------------------------------------
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

# ---------------------------------------------
# 4Ô∏è‚É£ Train Models
# ---------------------------------------------
models = {
    "Linear Regression": LinearRegression(),
    "Random Forest": RandomForestRegressor(n_estimators=100, random_state=42),
    "XGBoost": XGBRegressor(n_estimators=100, learning_rate=0.1, random_state=42)
}

results = {}

for name, model in models.items():
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    rmse = np.sqrt(mse)
    r2 = r2_score(y_test, y_pred)
    results[name] = {"MSE": mse, "RMSE": rmse, "R¬≤": r2}

# ---------------------------------------------
# 5Ô∏è‚É£ Compare Results
# ---------------------------------------------
print("\nüìä Model Performance Comparison:\n")
for model, metrics in results.items():
    print(f"{model}: MSE={metrics['MSE']:.3f}, RMSE={metrics['RMSE']:.3f}, R¬≤={metrics['R¬≤']:.3f}")

# ---------------------------------------------
# 6Ô∏è‚É£ Save Best Model
# ---------------------------------------------
best_model_name = max(results, key=lambda x: results[x]["R¬≤"])
best_model = models[best_model_name]

joblib.dump(best_model, "best_crop_yield_model.pkl")
print(f"\n‚úÖ Best model saved: {best_model_name} -> 'best_crop_yield_model.pkl'")

# ---------------------------------------------
# 7Ô∏è‚É£ Sample Prediction
# ---------------------------------------------
sample = np.array([[1000, 28, 1, 150, 2, 1]])  # Example input
sample_scaled = scaler.transform(sample)
predicted_yield = best_model.predict(sample_scaled)
print(f"\nüåæ Predicted Crop Yield for sample input: {predicted_yield[0]:.2f} tons/ha")